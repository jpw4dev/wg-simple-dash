networks:
  swag:
    external: true

# Example config for LinuxServer.io wireguard container
# Change environment variables to match your setup
services:
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
    networks:
      - swag
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Munich
      - SERVERURL=wireguard.yourserver.com
      - SERVERPORT=51820
      - PEERS=client1,client2,client3
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=192.168.1.0/24,10.13.13.1
      - LOG_CONFS=true
    volumes:
      - ./config:/config
    ports:
      - 51820:51820/udp
      - 8123:8123/tcp # The dashboard API is made available through the Wireguard container
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  wg-simple-dash:
    build: .
    container_name: wg-simple-dash
    cap_add:
      - NET_ADMIN
    environment:
      WG_DASH_CACHE_TTL: 5         # Optional. Cache to prevent too many calls to wireguard. Default 5 seconds.
      WG_DASH_BIND: "0.0.0.0:8123" # Optional. IP and port to bind to for the API server providing wireguard metrics. Default "0.0.0.0:8123"
      WG_DASH_WORKERS: 2           # Optional. Number of worker threads for the API server. Default 2.
      WG_DASH_KEY_DISPLAY_LEN: 44  # Optional. Length to display of each peer's public key. Default 44 (the whole key).
    network_mode: service:wireguard
    volumes:
      - ./config/wg_confs:/wg-config:ro  # Read only access to LinuxServer.io wireguard container's wg0.conf to match keys to peer names
    restart: unless-stopped
    depends_on:
      - wireguard
